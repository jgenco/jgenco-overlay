{%- block header -%}
# Copyright {{ this_year }} Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild {{ cargo_ebuild_ver }}
# Using template deno.tera
{% endblock %}
EAPI={%- block eapi -%}8{%- endblock %}

{% block crates -%}
CRATES="
{% for crate in crates -%}
{{ crate }}
{%- endfor -%}"
{%- endblock %}
CRATES+="${P}"
#NOTE: update deno.tera for long term changes
#To update: download deno crate from https://crates.io/api/v1/crates/${PN}/${PV}/download
#or https://github.com/denoland/deno/tree/main/cli
#Run cargo ebuild -T deno.tera
#Windows crates can be removed(deno-1.26.1) but may be alot of work in the future
#update postinstall for security warnings
#Use ninja-utils eclass to support dev-util/samurai?
#remove GN var?
#make sys-devel/lld optional?
# * GN_ARGS=" use_lld=false"                works with deno-1.22.3
# * GN_ARGS=" use_lld=false use_gold=false" works with deno-1.25.2

inherit {% block inherit -%}cargo{%- endblock %} llvm multiprocessing toolchain-funcs check-reqs bash-completion-r1

DESCRIPTION="A modern runtime for JavaScript and TypeScript"
HOMEPAGE="https://deno.land/"
SRC_URI={%- block src_uri -%}{% raw -%}"$(cargo_crate_uris)"{%- endraw %}{%- endblock %}

# License set may be more restrictive as OR is not respected
# use cargo-license for a more accurate license picture

#Note webkit = 0BSD and a Chromium License
#     ring   = openssl SSLeay ISC MIT
#     webpki = ISC
LICENSE={%- block license -%}"{{ license }}"{%- endblock %}
SLOT={%- block slot -%}"0"{%- endblock %}
KEYWORDS={%- block keyword -%}"~amd64"{%- endblock %}
BDEPEND="
	dev-util/gn
	dev-util/ninja
	>=virtual/rust-1.59.0
"
{% block variables -%}
{%- endblock %}

{%- block phases -%}
{%- endblock -%}
function find_crate(){
	[[ ${#} -ne 1 ]] && die "No crate name provided"
	for crate in ${CRATES};do
		[[ ${crate} =~ ${1} ]] && echo "${crate}" && return
	done
	die "Crate $1 not found"
}
pkg_pretend() {
	#This used 3.5GB using 3750M for safety
	CHECKREQS_DISK_BUILD="3750M"
	check-reqs_pkg_pretend
	}

pkg_setup() {
	CHECKREQS_DISK_BUILD="3750M"
	check-reqs_pkg_setup
	}

src_prepare() {
	pushd "${ECARGO_VENDOR}/$(find_crate ^v8-[0-9])" > /dev/null || die "V8 crate folder not found"
	eapply "${FILESDIR}/v8-0.43.1-lockfile.patch" \
		"${FILESDIR}/v8-0.42.0-disable-auto-ccache.patch" \
		"${FILESDIR}/v8-0.40.2-jobfix.patch" \
		"${FILESDIR}/v8-0.49.0-enable-gcc.patch"
	popd > /dev/null
	default
	}
src_compile() {
	#inspired by www-client/chromium
	local gn_conf=""
	#uses gold instead of lld - make lld optional someday
	gn_conf+=" use_lld=false"
	if tc-is-clang; then
		gb_conf+=" is_clang=true"
	else
		gn_conf+=" is_clang=false"
		gn_conf+=" use_custom_libcxx=false"
	fi

	export V8_FROM_SOURCE=1
	#export SCCACHE=
	#export CCACHE=
	export GN=${EPREFIX}/usr/bin/gn
	export NINJA=${EPREFIX}/usr/bin/ninja
	export CLANG_BASE_PATH=$(get_llvm_prefix)
	export NINJA_JOBS=$(makeopts_jobs)
	export GN_ARGS="${gn_conf}"
	einfo "GN_ARGS=${GN_ARGS}"
	cargo_src_compile --locked
	}
src_install() {
	cargo_src_install
	"${ED}/usr/bin/deno" completions bash > deno_bash_comp
	newbashcomp deno_bash_comp deno
	}
pkg_postinst(){
	:
	}

