{%- block header -%}
# Copyright {{ this_year }} Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild {{ cargo_ebuild_ver }}
# Using template deno.tera
{% endblock %}
EAPI={%- block eapi -%}8{%- endblock %}

{% block crates -%}
CRATES="
{% for crate in crates -%}
{{ crate }}
{%- endfor -%}"
{%- endblock %}
#NOTE: update deno.tera for long term changes
{#
#To update: download @ https://github.com/denoland/deno
#cd cli
#cargo ebuild -T deno.tera
#set DENO_STD_VER=https://github.com/denoland/deno/tree/main/tests/util std/version.ts
#set CHECKREQS_DISK_BUILD
#TODO
#Use ninja-utils eclass to support dev-util/samurai?
#remove GN var?
#add support for ccache/sccache
#add support for pre compiled archive
# * https://github.com/denoland/rusty_v8#the-rusty_v8_archive-environment-variable
#}
DENO_STD_VER=""
V8_VER=""
inherit {% block inherit -%}cargo{%- endblock %} llvm multiprocessing toolchain-funcs check-reqs shell-completion

IUSE="v8-prebuilt test"
RESTRICT="mirror !test? ( test )"

DESCRIPTION="A modern runtime for JavaScript and TypeScript"
HOMEPAGE="https://deno.land/"

SRC_URI={%- block src_uri -%}{% raw -%}"${CARGO_CRATE_URIS}"{%- endraw %}{%- endblock %}
SRC_URI+="
	https://github.com/denoland/deno/archive/refs/tags/v${PV}.tar.gz -> deno-${PV}.tar.gz
	test? (
		https://github.com/denoland/deno_std/archive/refs/tags/${DENO_STD_VER}.tar.gz -> deno_std@${DENO_STD_VER}.tar.gz
	)
	v8-prebuilt? (
		https://github.com/denoland/rusty_v8/releases/download/v${V8_VER}/librusty_v8_release_x86_64-unknown-linux-gnu.a ->
		librusty_v8_${V8_VER}_release_amd64.a
	)
"

# License set may be more restrictive as OR is not respected
# use cargo-license for a more accurate license picture

#Note webkit = 0BSD and a Chromium License
#     ring   = openssl SSLeay ISC MIT
#     webpki = ISC
LICENSE={%- block license -%}"{{ license }} openssl SSLeay"{%- endblock %}
SLOT={%- block slot -%}"0"{%- endblock %}
KEYWORDS={%- block keyword -%}"~amd64"{%- endblock %}
BDEPEND="
	dev-build/gn
	dev-build/ninja
	>=virtual/rust-1.76 <virtual/rust-1.77
	test? (
		net-misc/curl
	)
"
PATCHES=(
	"${FILESDIR}/deno-1.41.0-fix_disable_tests.patch"
)
DOCS=(Releases.md LICENSE.md README.md)
{% block variables -%}
{%- endblock %}

{%- block phases -%}
{%- endblock -%}
function find_crate() {
{% raw %}	[[ ${#} -ne 1 ]] && die "No crate name provided"{% endraw %}
	for crate in ${CRATES};do
		[[ ${crate} =~ ${1} ]] && echo "${crate/@/-}" && return
	done
	die "Crate $1 not found"
}
pkg_pretend() {
	#This used 7.6GB using 8G for safety
	CHECKREQS_DISK_BUILD="8G"
	check-reqs_pkg_pretend
	}

pkg_setup() {
	CHECKREQS_DISK_BUILD="8G"
	check-reqs_pkg_setup
	}
src_unpack() {
	cargo_src_unpack
	if use test; then
		rmdir "${S}/tests/util/std" || die "Failed to remove ${S}/tests/util/std"
		mv "${WORKDIR}/deno_std-${DENO_STD_VER}/" "${S}/tests/util/std" || die "Failed to move deno-std into position"
	fi
}
src_prepare() {
	pushd "${ECARGO_VENDOR}/$(find_crate ^v8@)" > /dev/null || die "V8 crate folder not found"
	eapply "${FILESDIR}/v8-0.43.1-lockfile.patch" \
		"${FILESDIR}/v8-0.42.0-disable-auto-ccache.patch" \
		"${FILESDIR}/v8-0.40.2-jobfix.patch"
	popd > /dev/null

	pushd "${ECARGO_VENDOR}/$(find_crate ^libffi-sys@)/libffi" > /dev/null || die
	eapply "${FILESDIR}/libffi-sys-2.3.0-trampoline-c99.patch"
	popd > /dev/null

	default
}
src_configure() {
	cd cli || die "Failed to change dir cli"
	local myfeatures=(
		__vendored_zlib_ng
	)
	cargo_src_configure --no-default-features
}
src_compile() {
	#inspired by www-client/chromium
	#GCC-12 issued warnings and caused it to fail
	local gn_conf="treat_warnings_as_errors=false"
	if tc-is-clang; then
		einfo "Clang version: $(clang-fullversion) - $(get_llvm_prefix)"
		gn_conf+=" is_clang=true"
	else
		export DISABLE_CLANG=true
		einfo "GCC version: $(gcc-fullversion)"
		gn_conf+=" use_custom_libcxx=false"
	fi

	if tc-ld-is-lld && tc-is-clang;then
		gn_conf+=" use_lld=true"
	elif tc-ld-is-gold;then
		gn_conf+=" use_lld=false use_gold=true"
	else
		gn_conf+=" use_lld=false use_gold=false"
	fi

	#They didn't include the pgo files tools/builtins-pgo/{x64,arm64}.profile
	#https://github.com/denoland/rusty_v8/pull/1063
	#https://github.com/Homebrew/homebrew-core/pull/108838
	gn_conf+=" v8_builtins_profiling_log_file=\"\""

	if use v8-prebuilt;then
		export RUSTY_V8_ARCHIVE="${DISTDIR}/librusty_v8_${V8_VER}_release_amd64.a"
	else
		export V8_FROM_SOURCE=1
	fi
	#export SCCACHE=
	#export CCACHE=
	export GN="${EPREFIX}/usr/bin/gn"
	export NINJA="${EPREFIX}/usr/bin/ninja"
	export CLANG_BASE_PATH=$(get_llvm_prefix)
	export NINJA_JOBS=$(makeopts_jobs)
	#support gn-.2077
	export NO_PRINT_GN_ARGS=true
	export GN_ARGS="${gn_conf}"
	#export EXTRA_GN_ARGS=
	einfo "GN_ARGS=${GN_ARGS}"

	pushd cli > /dev/null || die "Failed to change dir cli"
	cargo_src_compile -vv
	popd > /dev/null

	if use test;then
		pushd tests/util/server > /dev/null || die "Failed to change dir to tests/util/server"
		cargo build $(usex debug "" --release) || die
		popd > /dev/null
	fi

	./target/release/deno completions bash > deno.sh   || die "Failed to create bash completion file"
	./target/release/deno completions fish > deno.fish || die "Failed to create fish completion file"
	./target/release/deno completions zsh  > _deno     || die "Failed to create zsh completion file"
}

src_install() {
	cargo_src_install --path cli
	einstalldocs

	newbashcomp deno.sh deno
	dofishcomp deno.fish
	dozshcomp _deno
}

pkg_postinst() {
	if ! tc-is-clang ; then
		#--When cargo_src_compile -vv
		#QA Check notes gcc warns about return-local-addr for the following file
		#${ECARGO_VENDOR}/${v8_dir}/third_party/icu/source/i18n/formattedvalue.cpp:212
		#https://github.com/unicode-org/icu/blob/main/icu4c/source/i18n/formattedvalue.cpp#L212
		#the source code mentions this is a false positive
		#come up with some text to inform the user
		#TODO unbundle third party libs(ICU,zlib) if possible
		:
	fi
}
