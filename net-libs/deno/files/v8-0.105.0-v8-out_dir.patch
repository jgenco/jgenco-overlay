This allows setting V8_OUT_DIR for one location.
NOTE: mkdir $V8_OUT_DIR
      ln -s $V8_OUT_DIR/gn_out target/$TRIPLE/relase/gn_out 
      ln -s $V8_OUT_DIR/gn_out target/relase/gn_out
I don't know if both need set but well...

Background:
V8 can compile multiple times concurrently.

Upstream fixed this twice by setting up a lockfile so only one can compile at
one time. Now it seems V8 even with -j1 compiles two (atleast?) times.
target/$TRIPLE/relase ; target/release

I belive this change is an effect of an upstream change by Gentoo to always
set TARGET and change of TARGET_DIR to include $TRIPLE.  Perhaps this is a
clue to the original problem?

--- a/build.rs
+++ b/build.rs
@@ -45,6 +45,7 @@ fn main() {
     "SCCACHE",
     "V8_FORCE_DEBUG",
     "V8_FROM_SOURCE",
+    "V8_OUT_DIR",
     "PYTHON",
     "DISABLE_CLANG",
     "EXTRA_GN_ARGS",
@@ -122,14 +123,8 @@ fn main() {
 }
 
 fn acquire_lock() -> LockFile {
-  let root = env::current_dir().unwrap();
-  let out_dir = env::var_os("OUT_DIR").unwrap();
-  let lockfilepath = root
-    .join(out_dir)
-    .parent()
-    .unwrap()
-    .parent()
-    .unwrap()
+  let out_dir = PathBuf::from(env::var_os("V8_OUT_DIR").unwrap());
+  let lockfilepath = out_dir
     .join("v8.fslock");
   let mut lockfile = LockFile::open(&lockfilepath)
     .expect("Couldn't open lib download lockfile.");
@@ -459,23 +454,11 @@ fn static_lib_dir() -> PathBuf {
 }
 
 fn build_dir() -> PathBuf {
-  let cwd = env::current_dir().unwrap();
-
   // target/debug//build/rusty_v8-d9e5a424d4f96994/out/
-  let out_dir = env::var_os("OUT_DIR").expect(
-    "The 'OUT_DIR' environment is not set (it should be something like \
-     'target/debug/rusty_v8-{hash}').",
-  );
-  let out_dir_abs = cwd.join(out_dir);
+  let out_dir = PathBuf::from(env::var_os("V8_OUT_DIR").unwrap());
 
   // This would be target/debug or target/release
-  out_dir_abs
-    .parent()
-    .unwrap()
-    .parent()
-    .unwrap()
-    .parent()
-    .unwrap()
+  out_dir
     .to_path_buf()
 }
 
@@ -795,14 +778,8 @@ fn get_dirs() -> Dirs {
   // directories.
   // TODO(ry) This is quite brittle - if Cargo changes the directory structure
   // this could break.
-  let out = env::var("OUT_DIR").map(PathBuf::from).unwrap();
+  let out = PathBuf::from(env::var_os("V8_OUT_DIR").unwrap());
   let out = out
-    .parent()
-    .unwrap()
-    .parent()
-    .unwrap()
-    .parent()
-    .unwrap()
     .to_owned();
 
   let root = env::var("CARGO_MANIFEST_DIR").map(PathBuf::from).unwrap();
