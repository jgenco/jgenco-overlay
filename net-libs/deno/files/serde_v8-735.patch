https://github.com/denoland/deno_core/pull/735
magic/global.rs was also eddited
--- a/magic/transl8.rs
+++ b/magic/transl8.rs
@@ -87,8 +87,10 @@ where
   V: serde::de::Visitor<'de>,
   E: serde::de::Error,
 {
-  let y = visitor.visit_u64::<E>(opaque_send(&x));
-  std::mem::forget(x);
+  // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
+  // but there's no way to fix it easily. As a bandaid, let's box it.
+  let x = Box::new(x);
+  let y = visitor.visit_u64::<E>(Box::into_raw(x) as _);
   y
 }
 
@@ -111,7 +113,10 @@ pub(crate) unsafe fn opaque_deref_mut<'a, T>(ptr: u64) -> &'a mut T {
 /// Transmutes & copies the value from the "opaque" ptr
 /// NOTE: takes ownership & requires other end to forget its ownership
 pub(crate) unsafe fn opaque_take<T>(ptr: u64) -> T {
-  std::mem::transmute_copy::<T, T>(std::mem::transmute(ptr as usize))
+  // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
+  // but there's no way to fix it easily. As a bandaid, we boxed it before.
+  let ptr: *mut T = ptr as _;
+  *Box::<T>::from_raw(ptr)
 }
 
 macro_rules! impl_magic {
--- a/magic/transl8.rs
+++ b/magic/transl8.rs
@@ -37,7 +37,7 @@ where
   use serde::ser::SerializeStruct;
 
   let mut s = serializer.serialize_struct(T::MAGIC_NAME, 1)?;
-  let ptr = opaque_send(x);
+  let ptr = x as *const T as u64;
   s.serialize_field(MAGIC_FIELD, &ptr)?;
   s.end()
 }
@@ -94,22 +94,6 @@ where
   y
 }
 
-/// Constructs an "opaque" ptr from a reference to transerialize
-pub(crate) fn opaque_send<T: Sized>(x: &T) -> u64 {
-  (x as *const T) as u64
-}
-
-/// Copies an "opaque" ptr from a reference to an opaque ptr (transerialized)
-/// NOTE: ptr-to-ptr, extra indirection
-pub(crate) unsafe fn opaque_recv<T: ?Sized>(ptr: &T) -> u64 {
-  *(ptr as *const T as *const u64)
-}
-
-/// Transmutes an "opaque" ptr back into a reference
-pub(crate) unsafe fn opaque_deref_mut<'a, T>(ptr: u64) -> &'a mut T {
-  std::mem::transmute(ptr as usize)
-}
-
 /// Transmutes & copies the value from the "opaque" ptr
 /// NOTE: takes ownership & requires other end to forget its ownership
 pub(crate) unsafe fn opaque_take<T>(ptr: u64) -> T {
--- a/ser.rs
+++ b/ser.rs
@@ -9,8 +9,6 @@ use crate::error::Error;
 use crate::error::Result;
 use crate::keys::v8_struct_key;
 use crate::magic;
-use crate::magic::transl8::opaque_deref_mut;
-use crate::magic::transl8::opaque_recv;
 use crate::magic::transl8::MagicType;
 use crate::magic::transl8::ToV8;
 use crate::magic::transl8::MAGIC_FIELD;
@@ -254,16 +252,16 @@ impl<'a, 'b, 'c, T: MagicType + ToV8> ser::SerializeStruct
     value: &U,
   ) -> Result<()> {
     assert_eq!(key, MAGIC_FIELD);
-    let ptr: &U = value;
     // SAFETY: MagicalSerializer only ever receives single field u64s,
     // type-safety is ensured by MAGIC_NAME checks in `serialize_struct()`
-    self.opaque = unsafe { opaque_recv(ptr) };
+    self.opaque = unsafe { std::ptr::read(value as *const _ as *const u64) };
     Ok(())
   }
 
   fn end(self) -> JsResult<'a> {
     // SAFETY: transerialization assumptions imply `T` is still alive.
-    let x: &mut T = unsafe { opaque_deref_mut(self.opaque) };
+    let x: &mut T =
+      unsafe { (self.opaque as *mut T).as_mut().unwrap_unchecked() };
     let scope = &mut *self.scope.borrow_mut();
     x.to_v8(scope)
   }
--- a/magic/any_value.rs
+++ b/magic/any_value.rs
@@ -23,7 +23,7 @@ impl_magic!(AnyValue);
 
 impl ToV8 for AnyValue {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     match self {
--- a/magic/bigint.rs
+++ b/magic/bigint.rs
@@ -31,7 +31,7 @@ impl DerefMut for BigInt {
 
 impl ToV8 for BigInt {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     let (sign, words) = self.0.to_u64_digits();
--- a/magic/buffer.rs
+++ b/magic/buffer.rs
@@ -1,5 +1,6 @@
 // Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
 
+use std::cell::RefCell;
 use std::fmt::Debug;
 use std::ops::Deref;
 use std::ops::DerefMut;
@@ -79,19 +80,19 @@ impl From<V8Slice<u8>> for JsBuffer {
 // NOTE(bartlomieju): we use Option here, because `to_v8()` uses `&mut self`
 // instead of `self` which is dictated by the `serde` API.
 #[derive(Debug)]
-pub struct ToJsBuffer(Option<Box<[u8]>>);
+pub struct ToJsBuffer(RefCell<Option<Box<[u8]>>>);
 
 impl_magic!(ToJsBuffer);
 
 impl ToJsBuffer {
   pub fn empty() -> Self {
-    ToJsBuffer(Some(vec![0_u8; 0].into_boxed_slice()))
+    ToJsBuffer(Some(vec![0_u8; 0].into_boxed_slice()).into())
   }
 }
 
 impl From<Box<[u8]>> for ToJsBuffer {
   fn from(buf: Box<[u8]>) -> Self {
-    ToJsBuffer(Some(buf))
+    ToJsBuffer(Some(buf).into())
   }
 }
 
@@ -103,10 +104,11 @@ impl From<Vec<u8>> for ToJsBuffer {
 
 impl ToV8 for ToJsBuffer {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
-    let buf: Box<[u8]> = self.0.take().expect("RustToV8Buf was empty");
+    let buf: Box<[u8]> =
+      self.0.borrow_mut().take().expect("RustToV8Buf was empty");
 
     if buf.is_empty() {
       let ab = v8::ArrayBuffer::new(scope, 0);
--- a/magic/bytestring.rs
+++ b/magic/bytestring.rs
@@ -52,7 +52,7 @@ const _: () =
 
 impl ToV8 for ByteString {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     let v =
--- a/magic/detached_buffer.rs
+++ b/magic/detached_buffer.rs
@@ -41,7 +41,7 @@ impl DerefMut for DetachedBuffer {
 
 impl ToV8 for DetachedBuffer {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     let buffer = v8::ArrayBuffer::with_backing_store(scope, &self.0.store);
--- a/magic/external_pointer.rs
+++ b/magic/external_pointer.rs
@@ -18,7 +18,7 @@ impl_magic!(ExternalPointer);
 
 impl ToV8 for ExternalPointer {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     if self.0.is_null() {
--- a/magic/transl8.rs
+++ b/magic/transl8.rs
@@ -14,7 +14,7 @@ pub(crate) trait MagicType {
 
 pub(crate) trait ToV8 {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error>;
 }
--- a/magic/u16string.rs
+++ b/magic/u16string.rs
@@ -65,7 +65,7 @@ impl From<Vec<u16>> for U16String {
 
 impl ToV8 for U16String {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     let maybe_v =
--- a/magic/value.rs
+++ b/magic/value.rs
@@ -34,7 +34,7 @@ impl<'s> From<Value<'s>> for v8::Local<'s, v8::Value> {
 
 impl ToV8 for Value<'_> {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     _scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     // SAFETY: not fully safe, since lifetimes are detached from original scope
--- a/ser.rs
+++ b/ser.rs
@@ -260,8 +260,8 @@ impl<'a, 'b, 'c, T: MagicType + ToV8> ser::SerializeStruct
 
   fn end(self) -> JsResult<'a> {
     // SAFETY: transerialization assumptions imply `T` is still alive.
-    let x: &mut T =
-      unsafe { (self.opaque as *mut T).as_mut().unwrap_unchecked() };
+    let x: &T =
+      unsafe { (self.opaque as *const T).as_ref().unwrap_unchecked() };
     let scope = &mut *self.scope.borrow_mut();
     x.to_v8(scope)
   }
--- a/magic/transl8.rs
+++ b/magic/transl8.rs
@@ -69,7 +69,14 @@ where
       E: serde::de::Error,
     {
       // SAFETY: opaque ptr originates from visit_magic, which forgets ownership so we can take it
-      Ok(unsafe { opaque_take(ptr) })
+      Ok(unsafe {
+        {
+          // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
+          // but there's no way to fix it easily. As a bandaid, we boxed it before.
+          let ptr: *mut T = ptr as _;
+          *Box::<T>::from_raw(ptr)
+        }
+      })
     }
   }
 
@@ -94,15 +101,6 @@ where
   y
 }
 
-/// Transmutes & copies the value from the "opaque" ptr
-/// NOTE: takes ownership & requires other end to forget its ownership
-pub(crate) unsafe fn opaque_take<T>(ptr: u64) -> T {
-  // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
-  // but there's no way to fix it easily. As a bandaid, we boxed it before.
-  let ptr: *mut T = ptr as _;
-  *Box::<T>::from_raw(ptr)
-}
-
 macro_rules! impl_magic {
   ($t:ty) => {
     impl crate::magic::transl8::MagicType for $t {
--- a/magic/transl8.rs
+++ b/magic/transl8.rs
@@ -35,7 +35,7 @@ where
   T: MagicType,
 {
   use serde::ser::SerializeStruct;
-
+  // SERIALIZATION CRIMES
   let mut s = serializer.serialize_struct(T::MAGIC_NAME, 1)?;
   let ptr = x as *const T as u64;
   s.serialize_field(MAGIC_FIELD, &ptr)?;
@@ -71,6 +71,8 @@ where
       // SAFETY: opaque ptr originates from visit_magic, which forgets ownership so we can take it
       Ok(unsafe {
         {
+          // DESERIALIZATION CRIMES
+
           // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
           // but there's no way to fix it easily. As a bandaid, we boxed it before.
           let ptr: *mut T = ptr as _;
@@ -94,6 +96,8 @@ where
   V: serde::de::Visitor<'de>,
   E: serde::de::Error,
 {
+  // DESERIALIZATION CRIMES
+
   // serde_v8 was originally taking a pointer to a stack value here. This code is crazy
   // but there's no way to fix it easily. As a bandaid, let's box it.
   let x = Box::new(x);
--- a/ser.rs
+++ b/ser.rs
@@ -252,6 +252,8 @@ impl<'a, 'b, 'c, T: MagicType + ToV8> ser::SerializeStruct
     value: &U,
   ) -> Result<()> {
     assert_eq!(key, MAGIC_FIELD);
+    // SERIALIZATION CRIMES
+
     // SAFETY: MagicalSerializer only ever receives single field u64s,
     // type-safety is ensured by MAGIC_NAME checks in `serialize_struct()`
     self.opaque = unsafe { std::ptr::read(value as *const _ as *const u64) };
@@ -259,6 +261,8 @@ impl<'a, 'b, 'c, T: MagicType + ToV8> ser::SerializeStruct
   }
 
   fn end(self) -> JsResult<'a> {
+    // SERIALIZATION CRIMES
+
     // SAFETY: transerialization assumptions imply `T` is still alive.
     let x: &T =
       unsafe { (self.opaque as *const T).as_ref().unwrap_unchecked() };
--- a/magic/global.rs
+++ b/magic/global.rs
@@ -23,7 +23,7 @@ impl From<Global> for v8::Global<v8::Value> {
 
 impl ToV8 for Global {
   fn to_v8<'a>(
-    &mut self,
+    &self,
     scope: &mut v8::HandleScope<'a>,
   ) -> Result<v8::Local<'a, v8::Value>, crate::Error> {
     Ok(v8::Local::new(scope, &self.v8_value))
