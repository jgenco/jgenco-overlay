--- a/tests/integration/cert_tests.rs
+++ b/tests/integration/cert_tests.rs
@@ -59,13 +59,13 @@ itest_flaky!(cafile_ts_fetch_unsafe_ssl {
 //     "run --quiet --reload --allow-net --unsafely-ignore-certificate-errors=deno.land cert/deno_land_unsafe_ssl.ts",
 //   output: "cert/deno_land_unsafe_ssl.ts.out",
 // });
-
+/*
 itest!(ip_address_unsafe_ssl {
   args:
     "run --quiet --reload --allow-net --unsafely-ignore-certificate-errors=1.1.1.1 cert/ip_address_unsafe_ssl.ts",
   output: "cert/ip_address_unsafe_ssl.ts.out",
 });
-
+*/
 itest!(localhost_unsafe_ssl {
   args: "run --quiet --reload --allow-net --unsafely-ignore-certificate-errors=deno.land cert/cafile_url_imports.ts",
   output: "cert/localhost_unsafe_ssl.ts.out",
--- a/tests/integration/check_tests.rs
+++ b/tests/integration/check_tests.rs
@@ -212,7 +212,7 @@ fn reload_flag() {
     stderr.contains("Check")
   }
 }
-
+#[ignore = "needs internet"]
 #[test]
 fn typecheck_declarations_ns() {
   let context = TestContext::default();
@@ -249,7 +249,7 @@ fn typecheck_declarations_unstable() {
   println!("stderr: {}", output.stderr());
   output.assert_exit_code(0);
 }
-
+#[ignore = "needs internet"]
 #[test]
 fn ts_no_recheck_on_redirect() {
   let test_context = TestContext::default();
--- a/tests/integration/info_tests.rs
+++ b/tests/integration/info_tests.rs
@@ -170,7 +170,7 @@ itest!(package_json_basic {
   copy_temp_dir: Some("package_json/basic"),
   exit_code: 0,
 });
-
+/*
 itest!(info_import_map {
   args: "info preact/debug",
   output: "info/with_import_map/with_import_map.out",
@@ -178,7 +178,7 @@ itest!(info_import_map {
   copy_temp_dir: Some("info/with_import_map"),
   exit_code: 0,
 });
-
+*/
 itest!(info_dynamic_imports_tmpl_lit {
   args: "info compile/dynamic_imports_tmp_lit/main.js",
   output: "compile/dynamic_imports_tmp_lit/main.info.out",
--- a/tests/integration/init_tests.rs
+++ b/tests/integration/init_tests.rs
@@ -3,7 +3,7 @@
 use test_util as util;
 use util::assert_contains;
 use util::TestContextBuilder;
-
+#[ignore = "internet access - import"]
 #[test]
 fn init_subcommand_without_dir() {
   let context = TestContextBuilder::new().use_temp_cwd().build();
@@ -43,7 +43,7 @@ fn init_subcommand_without_dir() {
   assert_contains!(output.stdout(), "1 passed");
   output.skip_output_check();
 }
-
+#[ignore = "internet access - import"]
 #[test]
 fn init_subcommand_with_dir_arg() {
   let context = TestContextBuilder::new().use_temp_cwd().build();
@@ -89,7 +89,7 @@ fn init_subcommand_with_dir_arg() {
   assert_contains!(output.stdout(), "1 passed");
   output.skip_output_check();
 }
-
+#[ignore = "internet access - import"]
 #[test]
 fn init_subcommand_with_quiet_arg() {
   let context = TestContextBuilder::new().use_temp_cwd().build();
--- a/tests/integration/run_tests.rs
+++ b/tests/integration/run_tests.rs
@@ -94,7 +94,7 @@ itest!(_016_double_await {
   args: "run --quiet --allow-read --reload run/016_double_await.ts",
   output: "run/016_double_await.ts.out",
 });
-
+/*
 itest!(_017_import_redirect {
   args: "run --quiet --reload run/017_import_redirect.ts",
   output: "run/017_import_redirect.ts.out",
@@ -116,7 +116,7 @@ itest!(_017_import_redirect_info {
   args: "info --quiet --reload run/017_import_redirect.ts",
   output: "run/017_import_redirect_info.out",
 });
-
+*/
 itest!(_018_async_catch {
   args: "run --quiet --reload run/018_async_catch.ts",
   output: "run/018_async_catch.ts.out",
@@ -1015,7 +1015,7 @@ fn lock_redirects() {
 "#,
   );
 }
-
+#[ignore]
 #[test]
 fn lock_deno_json_package_json_deps() {
   let context = TestContextBuilder::new()
--- a/tests/integration/upgrade_tests.rs
+++ b/tests/integration/upgrade_tests.rs
@@ -194,7 +194,7 @@ fn upgrade_invalid_canary_version() {
     util::strip_ansi_codes(&String::from_utf8(output.stderr).unwrap())
   );
 }
-
+#[ignore]
 #[test]
 fn upgrade_prompt() {
   let context = TestContextBuilder::new()
--- a/tests/unit/chmod_test.ts
+++ b/tests/unit/chmod_test.ts
@@ -81,7 +81,7 @@ Deno.test(
 );
 
 Deno.test({ permissions: { write: true } }, function chmodSyncFailure() {
-  const filename = "/badfile.txt";
+  const filename = "/tmp/badfile.txt";
   assertThrows(
     () => {
       Deno.chmodSync(filename, 0o777);
@@ -173,7 +173,7 @@ Deno.test(
 );
 
 Deno.test({ permissions: { write: true } }, async function chmodFailure() {
-  const filename = "/badfile.txt";
+  const filename = "/tmp/badfile.txt";
   await assertRejects(
     async () => {
       await Deno.chmod(filename, 0o777);
--- a/tests/unit/command_test.ts
+++ b/tests/unit/command_test.ts
@@ -658,6 +658,7 @@ Deno.test(
       clearEnv: true,
       env: {
         FOO: "23147",
+        DENO_DIR: Deno.env.get("DENO_DIR") || "/tmp",
       },
     }).output();
 
@@ -683,6 +684,7 @@ Deno.test(
       clearEnv: true,
       env: {
         FOO: "23147",
+        DENO_DIR: Deno.env.get("DENO_DIR") || "/tmp",
       },
     }).outputSync();
 
--- a/tests/unit/process_test.ts
+++ b/tests/unit/process_test.ts
@@ -574,6 +574,7 @@ Deno.test(
       clearEnv: true,
       env: {
         FOO: "23147",
+        DENO_DIR: Deno.env.get("DENO_DIR") || "/tmp",
       },
     });
 
--- a/tests/unit/tls_test.ts
+++ b/tests/unit/tls_test.ts
@@ -1159,7 +1159,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSBadClientCertPrivateKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
@@ -1175,7 +1175,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSBadCertKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
@@ -1191,7 +1191,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSBadPrivateKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
@@ -1207,7 +1207,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSBadKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
@@ -1223,7 +1223,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSNotPrivateKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
@@ -1239,7 +1239,7 @@ Deno.test(
 );
 
 Deno.test(
-  { permissions: { read: true, net: true } },
+  { permissions: { read: true, net: true },ignore:true },
   async function connectTLSNotKey(): Promise<void> {
     await assertRejects(async () => {
       await Deno.connectTls({
--- a/tests/unit/utime_test.ts
+++ b/tests/unit/utime_test.ts
@@ -201,10 +201,10 @@ Deno.test(
 
     assertThrows(
       () => {
-        Deno.utimeSync("/baddir", atime, mtime);
+        Deno.utimeSync("/tmp/baddir", atime, mtime);
       },
       Deno.errors.NotFound,
-      "utime '/baddir'",
+      "utime '/tmp/baddir'",
     );
   },
 );
@@ -316,10 +316,10 @@ Deno.test(
 
     await assertRejects(
       async () => {
-        await Deno.utime("/baddir", atime, mtime);
+        await Deno.utime("/tmp/baddir", atime, mtime);
       },
       Deno.errors.NotFound,
-      "utime '/baddir'",
+      "utime '/tmp/baddir'",
     );
   },
 );
--- a/tests/unit_node/http2_test.ts
+++ b/tests/unit_node/http2_test.ts
@@ -137,7 +137,7 @@ Deno.test("[node/http2 server]", { sanitizeOps: false }, async () => {
   await new Promise((resolve) => server.close(resolve));
 });
 
-Deno.test("[node/http2 client GET https://www.example.com]", async () => {
+Deno.test("[node/http2 client GET https://www.example.com]",{ignore:true}, async () => {
   const clientSession = http2.connect("https://www.example.com");
   const req = clientSession.request({
     ":method": "GET",
