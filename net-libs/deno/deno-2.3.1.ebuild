# Copyright 2025 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild 0.5.4-r1
# Using template deno.tera

EAPI=8

CRATES="
"
#NOTE: update deno.tera for long term changes

DENO_STD_VER="2025.01.31"
V8_VER="135.1.0"

LLVM_COMPAT=( {18..20} )
#LLVM_OPTIONAL=1

PYTHON_COMPAT=( python3_{11..13} )

RUST_MIN_VER="1.85.0"
RUST_MAX_VER="1.88.0"

inherit cargo check-reqs llvm-r2 multiprocessing python-any-r1 shell-completion toolchain-funcs

DESCRIPTION="A modern runtime for JavaScript and TypeScript"
HOMEPAGE="https://deno.land/"

SRC_URI="${CARGO_CRATE_URIS}"
SRC_URI+="
	https://github.com/denoland/deno/archive/refs/tags/v${PV}.tar.gz -> deno-${PV}.tar.gz
	https://github.com/jgenco/jgenco-overlay-files/releases/download/deno-${PV}/deno-${PV}-crates.tar.xz
	test? (
		https://github.com/denoland/std/archive/refs/tags/release-${DENO_STD_VER}.tar.gz -> deno_std@${DENO_STD_VER}.tar.gz
	)
	v8-prebuilt? (
		https://github.com/denoland/rusty_v8/releases/download/v${V8_VER}/librusty_v8_release_x86_64-unknown-linux-gnu.a.gz ->
		librusty_v8_${V8_VER}_release_amd64.a.gz
		https://github.com/denoland/rusty_v8/releases/download/v${V8_VER}/src_binding_release_x86_64-unknown-linux-gnu.rs  ->
		librusty_v8_${V8_VER}_release_amd64.binding.rs
	)
"
LICENSE="MIT"
# Dependent crate licenses
LICENSE+="
	Apache-2.0 Apache-2.0-with-LLVM-exceptions BSD-2 BSD Boost-1.0
	CC0-1.0 ISC MIT MPL-2.0 MPL-2.0 Unicode-3.0 Unicode-DFS-2016 ZLIB
"

SLOT="0"
KEYWORDS="amd64"
IUSE="v8-prebuilt llvm test"
RESTRICT="mirror !test? ( test )"

#REQUIRED_USE="!v8-prebuilt? ( ${LLVM_REQUIRED_USE} )"

DEPEND="${PYTHON_DEPS}"
BDEPEND="
	dev-build/gn
	dev-build/ninja
	sys-libs/zlib

	$(llvm_gen_dep '
		llvm-core/clang:${LLVM_SLOT}
	')
	llvm? ( $(llvm_gen_dep '
		llvm-core/llvm:${LLVM_SLOT}
	') )

	test? (
		net-misc/curl
	)
"
PATCHES=(
	"${FILESDIR}/deno-2.3.1-fix_disable_tests.patch"
)
DOCS=(Releases.md LICENSE.md README.md)
function find_crate() {
	[[ ${#} -eq 0 ]] && die "No crate name provided"
	cd ${ECARGO_VENDOR}
	for crate in *;do
		if [[ ${crate} =~ ${1} ]];then
			[[ ${2} == "p" ]] && echo -n "${ECARGO_VENDOR}/"
			echo "${crate}" && return
		fi
	done
	die "Crate $1 not found"
}

disk_space_check() {
	local disk_space="5"
	local disk_space_test="6"
	if ! use v8-prebuilt; then
		disk_space="$(usex llvm 7 9)"
		disk_space_test="$(usex llvm 6 15)"
	fi
	use test && disk_space=$((${disk_space} + ${disk_space_test}))
	local CHECKREQS_DISK_BUILD="${disk_space}G"
	check-reqs_${EBUILD_PHASE_FUNC}
}
pkg_pretend() {
	disk_space_check
}

pkg_setup() {
	disk_space_check
	#use llvm && llvm-r2_pkg_setup
	rust_pkg_setup
	python_setup
}

src_unpack() {
	cargo_src_unpack
	if use test; then
		rmdir "${S}/tests/util/std" || die "Failed to remove ${S}/tests/util/std"
		mv "${WORKDIR}/std-release-${DENO_STD_VER}/" "${S}/tests/util/std" || die "Failed to move deno-std into position"
	fi
}

src_prepare() {
	#v8 crate begin
	eapply -d "$(find_crate ^v8- p)" -- \
		"${FILESDIR}/v8-0.42.0-disable-auto-ccache.patch" \
		"${FILESDIR}/v8-135.1.0-v8-out_dir.patch" \
		"${FILESDIR}/v8-0.105.0-v8-ninja-verbose.patch" \
		"${FILESDIR}/v8-135.1.0-linker_options.patch"

	#see v8-out_dir.patch
	export V8_OUT_DIR="${WORKDIR}/v8_out_dir"
	mkdir -p "${V8_OUT_DIR}"/gn_out \
		"$(cargo_target_dir)" \
		"${S}/target/"$(usex debug debug release) || die
	ln -s "${V8_OUT_DIR}"/gn_out "$(cargo_target_dir)" || die
	#cross-compile has a different path
	if [[ ! -h "${S}/target/"$(usex debug debug release)/gn_out ]]; then
		ln -s "${V8_OUT_DIR}"/gn_out "${S}/target/"$(usex debug debug release) || die
	fi

	#This comes from www-client/chromium - liable to change
	sed -i -e '/if (is_clang && !is_nacl && !is_cronet_build) {/,+2d' \
		"$(find_crate ^v8- p)/build/config/compiler/BUILD.gn" || die

	#https://github.com/denoland/rusty_v8/issues/1145 - only for testing?
	ln -s "$(find_crate deno_core_icudata p)/src" \
		"$(find_crate ^v8- p)/third_party/icu/common" || die
	#v8 crate end

	#fix tests
	sed -Ei 's#(".*(dns|test-http-https-default-ports).*)#//need internet \1#'\
		tests/node_compat/config.jsonc || die
	local spec_dir="tests/specs"
	local spec_tests=(
		${spec_dir}/cert/deno_land_unsafe_ssl #net
		${spec_dir}/cert/ip_address_unsafe_ssl #net
		${spec_dir}/compile/permissions_denied #LD_PRELOAD?
		${spec_dir}/future/unstable_flags #gpu
		${spec_dir}/import_map/import_map_config #net
		${spec_dir}/info/import_map #net
		${spec_dir}/npm/lifecycle_scripts # TODO requires node headers for node-gyp
		${spec_dir}/npm/lock_file_integrity_failure # needs vue
		${spec_dir}/npm/playwright_compat #d/ls playwright
		${spec_dir}/permission/deny_run_binary_absolute_path #LD_PRELOAD?
		${spec_dir}/run/_017_import* #net
		${spec_dir}/upgrade #upgrade/network

		#${spec_dir}/run/workspaces/members_are_imports #hash don't match?
		#${spec_dir}/workspaces/lockfile #hash don't match?

	)
	rm -r ${spec_tests[@]} || die
	find ${spec_dir} -type d -empty -print -delete || die

	sed "s#/usr/bin/sh#${EPREFIX}/bin/sh#" -i tests/unit/serve_test.ts || die

	default
}

src_configure() {
	cd cli || die "Failed to change dir cli"
	local myfeatures=(
		#__vendored_zlib_ng
	)
	cargo_src_configure --no-default-features
}

src_compile() {
	#inspired by www-client/chromium and alpine's port
	#GCC-12 issued warnings and caused it to fail
	local gn_conf=(
		treat_warnings_as_errors=false
		#custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
		#clang_base_path=\"${EPREFIX}/usr/lib/clang/${LLVM_SLOT}/\"
		chrome_pgo_phase=0 #offer pgo option?
		fatal_linker_warnings=false
		is_debug=false
		#symbol_level=0
		#system_zlib=true
		#use_curtom_libcxx=false
		use_sysroot=false

	)
	if use llvm; then
		einfo "Clang version: $(clang-fullversion) - $(get_llvm_prefix)"
		gn_conf+=(is_clang=true)
	else
		export DISABLE_CLANG=true
		einfo "GCC version: $(gcc-fullversion)"
		gn_conf+=(use_custom_libcxx=false)
	fi

	if tc-ld-is-lld && use llvm; then
		gn_conf+=(use_lld=true)
	else
		gn_conf+=(use_lld=false)
	fi

	#They didn't include the pgo files tools/builtins-pgo/{x64,arm64}.profile
	#https://github.com/denoland/rusty_v8/pull/1063
	#https://github.com/Homebrew/homebrew-core/pull/108838
	gn_conf+=(v8_builtins_profiling_log_file=\"\")

	export V8_FROM_SOURCE=$(usex v8-prebuilt false true)
	export RUSTY_V8_ARCHIVE=$(usex v8-prebuilt "${WORKDIR}/librusty_v8_${V8_VER}_release_amd64.a" "")
	#also add for gcc?
	export RUSTY_V8_SRC_BINDING_PATH=$(usex v8-prebuilt "${DISTDIR}/librusty_v8_${V8_VER}_release_amd64.binding.rs" "")

	#export SCCACHE=
	#export CCACHE=
	export GN="${EPREFIX}/usr/bin/gn"
	export NINJA="${EPREFIX}/usr/bin/ninja"
	export CLANG_BASE_PATH=$(get_llvm_prefix)
	export NUM_JOBS=$(makeopts_jobs)

	#support gn-.2077
	export PRINT_GN_ARGS=false
	export GN_ARGS="${gn_conf[@]}"
	#export EXTRA_GN_ARGS=
	einfo "GN_ARGS=${GN_ARGS}"

	pushd cli > /dev/null || die "Failed to change dir cli"
	cargo_src_compile -vv
	popd > /dev/null

	if use test;then
		einfo "Building test server..."
		local tests_bin=(
			"tests/util/server:--release"
			"tests/specs/node/child_process_extra_pipes/test-pipe/src:"
			"tests/ffi/Cargo.toml:--release"
		)
		for entry in ${tests_bin[@]};do
			local path="${entry%:*}"
			local options="${entry#*:}"
			pushd ${path}> /dev/null
			cargo_env ${CARGO} build ${options} || die "failed to build test server"
			popd
		done

		pushd tests/specs/node/child_process_extra_pipes/test-pipe/target || die
		if [[ ! -f debug/test-pipe ]] ;then
			mkdir debug || die
			ln -s ../$(rust_abi)/debug/test-pipe  debug/test-pipe || die
		fi
		popd > /dev/null
	fi

	"$(cargo_target_dir)"/deno completions bash > deno.sh   || die "Failed to create bash completion file"
	"$(cargo_target_dir)"/deno completions fish > deno.fish || die "Failed to create fish completion file"
	"$(cargo_target_dir)"/deno completions zsh  > _deno     || die "Failed to create zsh completion file"
}
src_test() {
	cargo_src_test --no-fail-fast
}

src_install() {
	cargo_src_install --path cli
	einstalldocs

	newbashcomp deno.sh deno
	dofishcomp deno.fish
	dozshcomp _deno
}

pkg_postinst() {
	if ! tc-is-clang ; then
		#--When cargo_src_compile -vv
		#QA Check notes gcc warns about return-local-addr for the following file
		#${ECARGO_VENDOR}/${v8_dir}/third_party/icu/source/i18n/formattedvalue.cpp:212
		#https://github.com/unicode-org/icu/blob/main/icu4c/source/i18n/formattedvalue.cpp#L212
		#the source code mentions this is a false positive
		#come up with some text to inform the user
		#TODO unbundle third party libs(ICU,zlib) if possible
		:
	fi
}
