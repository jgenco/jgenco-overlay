* Quarto-cli bundles their binary deps near quarto.
This patch makes quarto-cli find all of them in QUARTO_BIN_PATH
* Creates QUARTO_BASE_PATH to replace paths relative to QUARTO_BIN_PATH
* tests/test.ts: some test fail and clober the path for future test 
causing them to fail.
tests/smoke/extensions/extension-render-journals.test.ts:
If await quarto([...]); fails Deno.chdir(wd); doesn't seem to fix the problem

--- a/src/core/dart-sass.ts
+++ b/src/core/dart-sass.ts
@@ -15,7 +15,7 @@ import { existsSync } from "fs/mod.ts";
 import { warnOnce } from "./log.ts";
 
 export function dartSassInstallDir() {
-  return toolsPath("dart-sass");
+  return toolsPath("");
 }
 
 export async function dartSassVersion() {
@@ -66,7 +66,7 @@ export async function dartCommand(args: string[]) {
     }
 
     const command = Deno.build.os === "windows" ? "sass.bat" : "sass";
-    return toolsPath(join("dart-sass", command));
+    return toolsPath(command);
   };
   const sass = resolvePath();
 
--- a/src/core/devconfig.ts
+++ b/src/core/devconfig.ts
@@ -69,8 +69,7 @@ export function writeDevConfig(config: DevConfig, binPath: string) {
 }
 
 export function readInstalledDevConfig(): DevConfig | null {
-  const binPath = quartoConfig.binPath();
-  const configPath = join(binPath, "..", "config", kDevConfig);
+  const configPath = join(quartoConfig.basePath(), "package","dist", "config", kDevConfig);
   if (existsSync(configPath)) {
     return JSON.parse(Deno.readTextFileSync(configPath)) as DevConfig;
   } else {
--- a/src/core/quarto.ts
+++ b/src/core/quarto.ts
@@ -27,6 +27,7 @@ export interface QuartoConfig {
 let dotenvConfig: DotenvConfig;
 
 export const quartoConfig = {
+  basePath: () => getenv("QUARTO_BASE_PATH"),
   binPath: () => getenv("QUARTO_BIN_PATH"),
   toolsPath: () => join(getenv("QUARTO_BIN_PATH"), "tools"),
   sharePath: () => getenv("QUARTO_SHARE_PATH"),
@@ -68,7 +69,7 @@ export function monitorPreviewTerminationConditions(cleanup?: VoidFunction) {
   // src code change
   if (quartoConfig.isDebug()) {
     const srcDir = normalizePath(
-      join(quartoConfig.binPath(), "../../../src"),
+    join(quartoConfig.basePath(), "src"),
     );
     const watcher = Deno.watchFs([srcDir], { recursive: true });
     const watchForChanges = async () => {
--- a/src/core/resources.ts
+++ b/src/core/resources.ts
@@ -55,7 +55,7 @@ export function toolsPath(binary: string): string {
     }
   }
 
-  return join(quartoConfig.toolsPath(), binary);
+  return join(quartoConfig.binPath(), binary);
 }
 
 export function pandocBinaryPath(): string {
--- a/tests/test.ts
+++ b/tests/test.ts
@@ -117,6 +117,12 @@ export function test(test: TestDescriptor) {
   Deno.test({
     name: testName,
     async fn(context) {
+      const testDir = join(quartoConfig.basePath(),"tests");
+      if(testDir !== Deno.cwd()){
+        console.log("Testdir leakage:"+Deno.cwd());
+        console.log("changing to    :"+testDir);
+        Deno.chdir(testDir);
+      }
       await initDenoDom();
       const runTest = !test.context.prereq || await test.context.prereq();
       if (runTest) {
@@ -185,7 +191,7 @@ export function test(test: TestDescriptor) {
           const originUrl = new URL(context.origin);
           const absPath = originUrl.pathname;
 
-          const quartoRoot = join(quartoConfig.binPath(), "..", "..", "..");
+          const quartoRoot = quartoConfig.basePath();
           const relPath = relative(
             join(quartoRoot, "tests"),
             absPath,
--- a/src/command/render/render-shared.ts
+++ b/src/command/render/render-shared.ts
@@ -221,7 +221,7 @@ export async function rswURL(port: number, path: string) {
 async function rswPortToken(port: number) {
   const result = await execProcess(
     {
-      cmd: ["/usr/lib/rstudio-server/bin/rserver-url", String(port)],
+      cmd: ["@GENTOO_PORTAGE_EPREFIX@/usr/bin/rserver-url", String(port)],
       stdout: "piped",
       stderr: "piped",
     },
