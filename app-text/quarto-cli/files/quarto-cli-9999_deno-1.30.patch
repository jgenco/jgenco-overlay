This patch allows quarto-cli to work on deno 1.30 and std@0.177.0
If you stay at std@0.170.0 the test fail b/c of Deno.core.runMicrotasks
I belive this is the /testing system/ and not the test themselves

* Most of these changes where simple.
* The dotenv changes were have not been tested.
* The import_maps I only changed streams/conversion.ts -> streams/write_all.ts
  I created an extra patch that adds other files now imported by this patch.
  I don't know if it is needed.
Apply patch after sed'ing 0.166.0 -> 0.177.0
perhaps like:
sed -i "s/std@0.166.0/std@${DENO_STD_VER}/" \
	src/{,dev_}import_map.json \
	src/vendor/import_map.json \
	src/resources/deno_std/{,run_}import_map.json \
	package/scripts/deno_std/deno_std.ts \
	package/src/common/dependencies/deno.ts

--- a/package/scripts/deno_std/deno_std.ts
+++ b/package/scripts/deno_std/deno_std.ts
@@ -48,7 +48,7 @@ import * as base64 from "https://deno.land/std@0.177.0/encoding/base64.ts";
 import * as base64url from "https://deno.land/std@0.177.0/encoding/base64url.ts";
 import * as binary from "https://deno.land/std@0.177.0/encoding/binary.ts";
 import * as csv from "https://deno.land/std@0.177.0/encoding/csv.ts";
-import * as front_matter from "https://deno.land/std@0.177.0/encoding/front_matter.ts";
+import * as front_matter from "https://deno.land/std@0.177.0/encoding/front_matter/yaml.ts";
 import * as hex from "https://deno.land/std@0.177.0/encoding/hex.ts";
 import * as jsonc from "https://deno.land/std@0.177.0/encoding/jsonc.ts";
 import * as toml from "https://deno.land/std@0.177.0/encoding/toml.ts";
--- a/package/src/util/utils.ts
+++ b/package/src/util/utils.ts
@@ -1,4 +1,4 @@
-import { writeAll } from "streams/conversion.ts";
+import { writeAll } from "streams/write_all.ts";
 import { CmdResult, runCmd } from "./cmd.ts";
 
 // Read an environment variable
--- a/src/command/capabilities/cmd.ts
+++ b/src/command/capabilities/cmd.ts
@@ -5,7 +5,7 @@
 *
 */
 
-import { writeAllSync } from "streams/conversion.ts";
+import { writeAllSync } from "streams/write_all.ts";
 
 import { Command } from "cliffy/command/mod.ts";
 import { capabilities } from "./capabilities.ts";
--- a/src/core/console.ts
+++ b/src/core/console.ts
@@ -6,7 +6,8 @@
 */
 
 import { ansi } from "cliffy/ansi/mod.ts";
-import { readAllSync, writeAllSync } from "streams/conversion.ts";
+import { readAllSync} from "streams/read_all.ts";
+import { writeAllSync } from "streams/write_all.ts";
 import { info } from "log/mod.ts";
 import { runningInCI } from "./ci-info.ts";
 
--- a/src/core/download.ts
+++ b/src/core/download.ts
@@ -5,7 +5,7 @@
 *
 */
 
-import { writeAll } from "streams/conversion.ts";
+import { writeAll } from "streams/write_all.ts";
 import { progressBar } from "./console.ts";
 
 export interface DownloadError extends Error {
--- a/src/core/quarto.ts
+++ b/src/core/quarto.ts
@@ -8,7 +8,7 @@ import { existsSync } from "fs/exists.ts";
 import { extname, join } from "path/mod.ts";
 import { info } from "log/mod.ts";
 import * as colors from "fmt/colors.ts";
-import { config, ConfigOptions, DotenvConfig } from "dotenv/mod.ts";
+import { load, LoadOptions } from "dotenv/mod.ts";
 
 import { getenv } from "./env.ts";
 import { exitWithCleanup } from "./cleanup.ts";
@@ -24,7 +24,7 @@ export interface QuartoConfig {
   isDebug(): boolean;
 }
 
-let dotenvConfig: DotenvConfig;
+let dotenvConfig: Record<string, string>;
 
 export const quartoConfig = {
   basePath: () => getenv("QUARTO_BASE_PATH"),
@@ -40,17 +40,17 @@ export const quartoConfig = {
       return kLocalDevelopment;
     }
   },
-  dotenv: async (): Promise<DotenvConfig> => {
+  dotenv: async (): Promise<Record<string, string>> => {
     if (!dotenvConfig) {
-      const options: ConfigOptions = {
-        defaults: join(quartoConfig.sharePath(), "env", "env.defaults"),
+      const options: LoadOptions = {
+        defaultsPath: join(quartoConfig.sharePath(), "env", "env.defaults"),
       };
       if (quartoConfig.isDebug()) {
-        options.path = join(quartoConfig.sharePath(), "..", "..", ".env");
+        options.envPath = join(quartoConfig.sharePath(), "..", "..", ".env");
       } else {
-        options.path = options.defaults;
+        options.envPath = options.defaultsPath;
       }
-      dotenvConfig = await config(options);
+      dotenvConfig = await load(options);
     }
     return dotenvConfig;
   },
--- a/src/dev_import_map.json
+++ b/src/dev_import_map.json
@@ -53,7 +53,7 @@
     "cliffy/command/mod.ts": "./vendor/deno.land/x/cliffy@v0.25.7/command/mod.ts",
     "log/mod.ts": "./vendor/deno.land/std@0.177.0/log/mod.ts",
     "path/mod.ts": "./vendor/deno.land/std@0.177.0/path/mod.ts",
-    "streams/conversion.ts": "./vendor/deno.land/std@0.177.0/streams/conversion.ts",
+    "streams/write_all.ts": "./vendor/deno.land/std@0.177.0/streams/write_all.ts",
     "semver/mod.ts": "./vendor/deno.land/x/semver@v1.4.0/mod.ts",
     "node/fs.ts": "./vendor/deno.land/std@0.177.0/node/fs.ts",
     "encoding/yaml.ts": "./vendor/deno.land/std@0.177.0/encoding/yaml.ts",
--- a/src/format/pdf/format-pdf.ts
+++ b/src/format/pdf/format-pdf.ts
@@ -45,7 +45,7 @@ import { RenderedFile, RenderServices } from "../../command/render/types.ts";
 import { ProjectConfig, ProjectContext } from "../../project/types.ts";
 import { BookExtension } from "../../project/types/book/book-shared.ts";
 
-import { readLines } from "io/buffer.ts";
+import { readLines } from "io/read_lines.ts";
 import { TempContext } from "../../core/temp.ts";
 import { isLatexPdfEngine, pdfEngine } from "../../config/pdf.ts";
 import { formatResourcePath } from "../../core/resources.ts";
--- a/src/publish/rsconnect/bundle.ts
+++ b/src/publish/rsconnect/bundle.ts
@@ -8,7 +8,7 @@
 // deno-lint-ignore-file no-deprecated-deno-api
 
 import { dirname, join } from "path/mod.ts";
-import { copy } from "streams/conversion.ts";
+import { copy } from "streams/copy.ts";
 import { ensureDirSync } from "fs/mod.ts";
 
 import { createHash } from "node/crypto.ts";
--- a/src/quarto-core/dotenv.ts
+++ b/src/quarto-core/dotenv.ts
@@ -5,7 +5,7 @@
 *
 */
 
-import { config, DotenvConfig, stringify } from "dotenv/mod.ts";
+import { load, stringify } from "dotenv/mod.ts";
 import { join } from "path/mod.ts";
 import { safeExistsSync } from "../core/path.ts";
 import { isEqual } from "../core/lodash.ts";
@@ -19,11 +19,11 @@ const kQuartoEnvRequired = `${kQuartoEnv}.required`;
 
 // read the QUARTO_PROFILE from dotenv if it's there
 export async function dotenvQuartoProfile(projectDir: string) {
-  // read config
-  const conf = await config({
-    defaults: join(projectDir, kQuartoEnv),
-    path: join(projectDir, kQuartoEnvLocal),
-  });
+  // read load
+  const conf = await load({
+    defaultsPath: join(projectDir, kQuartoEnv),
+    envPath: join(projectDir, kQuartoEnvLocal),
+});
 
   // return profile if we have it
   return conf[kQuartoProfile];
@@ -35,7 +35,7 @@ export async function dotenvQuartoProfile(projectDir: string) {
 const dotenvVariablesSet: string[] = [];
 
 // track previous variables defined (used to trigger event indicating a change)
-let prevDotenvVariablesDefined: DotenvConfig | undefined;
+let prevDotenvVariablesDefined: Record<string, string> | undefined;
 
 export async function dotenvSetVariables(projectDir: string) {
   // back out any previous variables set (and note firstRun)
@@ -53,9 +53,9 @@ export async function dotenvSetVariables(projectDir: string) {
   ].filter(safeExistsSync).reverse();
 
   // read the dot env files in turn, track variables defined for validation
-  const dotenvVariablesDefined: DotenvConfig = {};
+  const dotenvVariablesDefined: Record<string, string> = {};
   for (const dotenvFile of dotenvFiles) {
-    const conf = await config({ path: dotenvFile });
+    const conf = await load({ envPath: dotenvFile });
     for (const key in conf) {
       // set into environment (and track that we did so for reversing out later)
       if (Deno.env.get(key) === undefined) {
@@ -79,10 +79,10 @@ export async function dotenvSetVariables(projectDir: string) {
       definedEnvTempPath,
       stringify(dotenvVariablesDefined),
     );
-    await config({
-      path: definedEnvTempPath,
-      example: dotenvRequired,
-      safe: true,
+    await load({
+      envPath: definedEnvTempPath,
+      examplePath: dotenvRequired,
+//      safe: true,
       allowEmptyValues: true,
     });
   }
--- a/src/vendor/import_map.json
+++ b/src/vendor/import_map.json
@@ -9,7 +9,7 @@
     "acorn/acorn": "./cdn.skypack.dev/acorn@7.4.1.js",
     "acorn/walk": "./cdn.skypack.dev/acorn-walk@7.2.0.js",
     "path/mod.ts": "./deno.land/std@0.177.0/path/mod.ts",
-    "streams/conversion.ts": "./deno.land/std@0.177.0/streams/conversion.ts",
+    "streams/write_all.ts": "./deno.land/std@0.177.0/streams/write_all.ts",
     "semver/mod.ts": "./deno.land/x/semver@v1.4.0/mod.ts",
     "node/fs.ts": "./deno.land/std@0.177.0/node/fs.ts",
     "encoding/yaml.ts": "./deno.land/std@0.177.0/encoding/yaml.ts",
