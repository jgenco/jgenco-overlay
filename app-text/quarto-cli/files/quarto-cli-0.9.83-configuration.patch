diff -ruN quarto-cli-0.9.83.orig/package/src/common/config.ts quarto-cli-0.9.83/package/src/common/config.ts
--- quarto-cli-0.9.83.orig/package/src/common/config.ts	2022-03-11 10:51:40.000000000
+++ quarto-cli-0.9.83/package/src/common/config.ts	2022-03-24 22:04:45.155801058
@@ -36,7 +36,7 @@
   version = version || getEnv("QUARTO_VERSION");
 
   const execPath = Deno.execPath();
-  const root = join(execPath, "..", "..", "..", "..");
+  const root = join(getEnv("QUARTO_ROOT_DIR"));
   const pkg = join(root, getEnv("QUARTO_PACKAGE_DIR"));
   const dist = join(pkg, getEnv("QUARTO_DIST_DIR"));
   const share = join(dist, getEnv("QUARTO_SHARE_DIR"));
diff -ruN quarto-cli-0.9.83.orig/package/src/common/configure.ts quarto-cli-0.9.83/package/src/common/configure.ts
--- quarto-cli-0.9.83.orig/package/src/common/configure.ts	2022-03-11 10:51:40.000000000
+++ quarto-cli-0.9.83/package/src/common/configure.ts	2022-03-24 22:03:59.845367516
@@ -41,16 +41,19 @@
     info(`Preparing ${dependency.name}`);
     const archDep = dependency.architectureDependencies[Deno.build.arch];
     if (archDep) {
-      const platformDep = archDep[Deno.build.os];
+      //const platformDep = archDep[Deno.build.os];
       info(`Downloading ${dependency.name}`);
 
-      let targetFile;
+      //let targetFile;
       try {
+ 	     await info(`${dependency.name}`);
+	      /*
         targetFile = await downloadBinaryDependency(
           dependency,
           platformDep,
           config,
         );
+	*/
       } catch (error) {
         const msg =
           `Failed to Download ${dependency.name}\nAre you sure that version ${dependency.version} of ${dependency.bucket} has been archived using './quarto-bld archive-bin-deps'?\n${error.message}`;
@@ -58,10 +61,10 @@
       }
 
       info(`Configuring ${dependency.name}`);
-      await platformDep.configure(targetFile);
+      //await platformDep.configure(targetFile);
 
       info(`Cleaning up`);
-      Deno.removeSync(targetFile);
+      //Deno.removeSync(targetFile);
     } else {
       throw new Error(
         `The architecture ${Deno.build.arch} is missing the dependency ${dependency.name}`,
