This adds last commit info to `quarto check` for 99.9.9 versions.
Adds info when quarto doesn't have the right version of Pandoc/Dart Sass.
Also upgrades info to warning.
--- a/src/command/check/check.ts
+++ b/src/command/check/check.ts
@@ -4,7 +4,7 @@
  * Copyright (C) 2021-2022 Posit Software, PBC
  */
 
-import { info } from "../../deno_ral/log.ts";
+import { info, warning } from "../../deno_ral/log.ts";
 
 import { render } from "../render/render-shared.ts";
 import { renderServices } from "../render/render-services.ts";
@@ -81,11 +81,13 @@ async function checkVersions(_services: RenderServices) {
       throw new Error(`Unable to determine ${name} version`);
     }
     if (!satisfies(version, constraint)) {
-      info(
+      warning(
         `      NOTE: ${name} version ${version} is too old. Please upgrade to ${
           constraint.slice(2)
         } or later.`,
       );
+      const name_env = "QUARTO_"+name.toUpperCase().replace(" ","_");
+      warning(`            Or set ${name_env} to a path of an appropriate ${name} version`);
     } else {
       info(`      ${name} version ${version}: OK`);
     }
@@ -146,17 +148,7 @@ async function checkInstall(services: RenderServices) {
     // if they're running a dev version, we assume git is installed
     // and QUARTO_ROOT is set to the root of the quarto-cli repo
     // print the output of git rev-parse HEAD
-    const quartoRoot = Deno.env.get("QUARTO_ROOT");
-    if (quartoRoot) {
-      const gitHead = await execProcess({
-        cmd: ["git", "-C", quartoRoot, "rev-parse", "HEAD"],
-        stdout: "piped",
-        stderr: "piped", // to not show error if not in a git repo
-      });
-      if (gitHead.success && gitHead.stdout) {
-        info(`${kIndent}commit: ${gitHead.stdout.trim()}`);
-      }
-    }
+    info(`${kIndent}commit:  ${quartoConfig.commit()}`);
   }
   info(`${kIndent}Path: ${quartoConfig.binPath()}`);
   if (Deno.build.os === "windows") {
--- a/src/core/quarto.ts
+++ b/src/core/quarto.ts
@@ -57,6 +57,14 @@ export const quartoConfig = {
     // we are in dev mode were only quarto.cmd is available
     return join(binPath, "quarto.cmd");
   },
+  commit: () => {
+    const commitPath = join(getenv("QUARTO_SHARE_PATH"), "commit");
+    if (existsSync(commitPath)) {
+      return Deno.readTextFileSync(commitPath);
+    } else {
+      return "";
+    }
+  },
   dotenv: async (forceReload?: boolean): Promise<Record<string, string>> => {
     if (forceReload || !dotenvConfig) {
       const options: ConfigOptions = {
