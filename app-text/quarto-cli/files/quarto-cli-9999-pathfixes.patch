Quarto-cli bundles their binary deps near quarto.
* This patch makes quarto-cli find all of them in QUARTO_BIN_PATH
* Creates QUARTO_BASE_PATH to replace paths relative to QUARTO_BIN_PATH
* add special test for pandoc to use official version of pandoc 
  (called pandoc-quarto) instead of system pandoc
--- a/src/core/dart-sass.ts
+++ b/src/core/dart-sass.ts
@@ -14,7 +14,7 @@ import { existsSync } from "../deno_ral/fs.ts";
 import { warnOnce } from "./log.ts";
 
 export function dartSassInstallDir() {
-  return architectureToolsPath("dart-sass");
+  return architectureToolsPath("");
 }
 
 export async function dartSassVersion() {
@@ -66,7 +66,7 @@ export async function dartCommand(args: string[]) {
     }
 
     const command = Deno.build.os === "windows" ? "sass.bat" : "sass";
-    return architectureToolsPath(join("dart-sass", command));
+    return architectureToolsPath(command);
   };
   const sass = resolvePath();
 
--- a/src/core/devconfig.ts
+++ b/src/core/devconfig.ts
@@ -71,8 +71,7 @@ export function writeDevConfig(config: DevConfig, binPath: string) {
 }
 
 export function readInstalledDevConfig(): DevConfig | null {
-  const binPath = quartoConfig.binPath();
-  const configPath = join(binPath, "..", "config", kDevConfig);
+  const configPath = join(quartoConfig.basePath(), "package","dist", "config", kDevConfig);
   if (existsSync(configPath)) {
     return JSON.parse(Deno.readTextFileSync(configPath)) as DevConfig;
   } else {
--- a/src/core/previewurl.ts
+++ b/src/core/previewurl.ts
@@ -106,7 +106,7 @@ export async function rswURL(port: number, path: string) {
 async function rswPortToken(port: number) {
   const result = await execProcess(
     {
-      cmd: ["/usr/lib/rstudio-server/bin/rserver-url", String(port)],
+      cmd: ["@GENTOO_PORTAGE_EPREFIX@/usr/bin/rserver-url", String(port)],
       stdout: "piped",
       stderr: "piped",
     },
--- a/src/core/quarto.ts
+++ b/src/core/quarto.ts
@@ -27,6 +27,7 @@ export interface QuartoConfig {
 let dotenvConfig: Record<string, string>;
 
 export const quartoConfig = {
+  basePath: () => getenv("QUARTO_BASE_PATH"),
   binPath: () => getenv("QUARTO_BIN_PATH"),
   toolsPath: () => join(getenv("QUARTO_BIN_PATH"), "tools"),
   sharePath: () => getenv("QUARTO_SHARE_PATH"),
@@ -124,7 +125,7 @@ function terminatePreview(reason: string, cleanup?: VoidFunction) {
 }
 
 function quartoSrcDir() {
-  return normalizePath(join(quartoConfig.binPath(), "../../../src"));
+  return normalizePath(join(quartoConfig.basePath(), "src"));
 }
 
 function buildPreviewJs(srcDir: string, cleanup?: VoidFunction) {
--- a/src/core/resources.ts
+++ b/src/core/resources.ts
@@ -72,7 +72,16 @@ export function toolsPath(binary: string, defaultPath?: string): string {
       }
     }
   }
-  return join(quartoConfig.toolsPath(), defaultPath || binary);
+  if(binary === "pandoc"){
+     const pandocBinsList = ["pandoc-quarto", "pandoc-bin"];
+     for(const pandocBin of pandocBinsList){
+         const binaryPandocQuarto = join(quartoConfig.binPath(),pandocBin);
+         if(existsSync(binaryPandocQuarto) && Deno.statSync(binaryPandocQuarto).isFile){
+             return binaryPandocQuarto;
+         }
+     }
+  }
+  return join(quartoConfig.binPath(), binary);
 }
 
 export function pandocBinaryPath(): string {
